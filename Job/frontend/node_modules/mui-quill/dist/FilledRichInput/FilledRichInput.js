"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var styles_1 = require("@material-ui/core/styles");
var clsx_1 = __importDefault(require("clsx"));
var react_1 = require("react");
var RichInputBase_1 = __importDefault(require("../RichInputBase"));
/**
 * Styles
 */
var stylesInjector = styles_1.withStyles(function (theme) {
    var light = theme.palette.type === 'light';
    var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
    var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';
    return styles_1.createStyles({
        /* Styles applied to the root element. */
        root: {
            position: 'relative',
            backgroundColor: backgroundColor,
            borderRadius: theme.shape.borderRadius,
            transition: theme.transitions.create('background-color', {
                duration: theme.transitions.duration.shorter,
                easing: theme.transitions.easing.easeOut,
            }),
            '&:hover': {
                backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
                // Reset on touch devices, it doesn't add specificity
                '@media (hover: none)': {
                    backgroundColor: backgroundColor,
                },
            },
            '&$focused': {
                backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)',
            },
            '&$disabled': {
                backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)',
            },
        },
        /* Styles applied to the root element if color secondary. */
        colorSecondary: {
            '&$underline:after': {
                borderBottomColor: theme.palette.secondary.main,
            },
        },
        /* Styles applied to the root element unless `disableUnderline={true}`. */
        underline: {
            '&:after': {
                borderBottom: "2px solid " + theme.palette.primary.main,
                left: 0,
                bottom: 0,
                // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
                content: '""',
                position: 'absolute',
                right: 0,
                transform: 'scaleX(0)',
                transition: theme.transitions.create('transform', {
                    duration: theme.transitions.duration.shorter,
                    easing: theme.transitions.easing.easeOut,
                }),
                pointerEvents: 'none',
            },
            '&$focused:after': {
                transform: 'scaleX(1)',
            },
            '&$error:after': {
                borderBottomColor: theme.palette.error.main,
                transform: 'scaleX(1)',
            },
            '&:before': {
                borderBottom: "1px solid " + bottomLineColor,
                left: 0,
                bottom: 0,
                // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
                content: '"\\00a0"',
                position: 'absolute',
                right: 0,
                transition: theme.transitions.create('border-bottom-color', {
                    duration: theme.transitions.duration.shorter,
                }),
                pointerEvents: 'none',
            },
            '&:hover:not($disabled):before': {
                borderBottom: "1px solid " + theme.palette.text.primary,
            },
            '&$disabled:before': {
                borderBottomStyle: 'dotted',
            },
        },
        /* Pseudo-class applied to the root element if the component is focused. */
        focused: {},
        /* Pseudo-class applied to the root element if `disabled={true}`. */
        disabled: {},
        /* Styles applied to the root element if `startAdornment` is provided. */
        adornedStart: {
            paddingLeft: 12,
        },
        /* Styles applied to the root element if `endAdornment` is provided. */
        adornedEnd: {
            paddingRight: 12,
        },
        /* Pseudo-class applied to the root element if `error={true}`. */
        error: {},
        /* Styles applied to the `input` element if `margin="dense"`. */
        marginDense: {},
        /* Styles applied to the `input` element. */
        input: {
            padding: '25px 12px 8px',
            '&:-webkit-autofill': {
                WebkitBoxShadow: light ? null : '0 0 0 100px #266798 inset',
                WebkitTextFillColor: light ? null : '#fff',
                caretColor: light ? null : '#fff',
                borderTopLeftRadius: 'inherit',
                borderTopRightRadius: 'inherit',
            },
        },
        /* Styles applied to the `input` element if `margin="dense"`. */
        inputMarginDense: {
            paddingTop: 21,
            paddingBottom: 4,
        },
        /* Styles applied to the root element if `hiddenLabel={true}`. */
        hiddenLabel: {},
        /* Styles applied to the root element if the component is a descendant of `FormControl`. */
        formControl: {},
        /* Styles applied to the root element if `fullWidth={true}`. */
        fullWidth: {},
        /* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */
        inputHiddenLabel: {
            paddingTop: 16,
            paddingBottom: 17,
            '&$inputMarginDense': {
                paddingTop: 8,
                paddingBottom: 9,
            },
        },
        /* Styles applied to the `input` element if `startAdornment` is provided. */
        inputAdornedStart: {
            paddingLeft: 0,
        },
        /* Styles applied to the `input` element if `endAdornment` is provided. */
        inputAdornedEnd: {
            paddingRight: 0,
        },
    });
}, { name: 'FilledRichInput' });
/**
 * Filled Rich Input
 *
 * @param {FilledRichInputProps} props
 * @returns {JSX.Element}
 */
var FilledRichInput = react_1.forwardRef(function FilledRichInput(props, ref) {
    var _a;
    var _b = props.classes, underlineClass = _b.underline, otherClasses = __rest(_b, ["underline"]), _c = props.disableUnderline, disableUnderline = _c === void 0 ? true : _c, other = __rest(props, ["classes", "disableUnderline"]);
    // Render
    return (jsx_runtime_1.jsx(RichInputBase_1.default, __assign({ ref: ref, classes: __assign(__assign({}, otherClasses), { root: clsx_1.default(otherClasses.root, (_a = {}, _a[underlineClass] = !disableUnderline, _a)) }) }, other), void 0));
});
// DEFAULT EXPORT
exports.default = stylesInjector(FilledRichInput);
//# sourceMappingURL=FilledRichInput.js.map