"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var FormHelperText_1 = __importDefault(require("@material-ui/core/FormHelperText"));
var InputLabel_1 = __importDefault(require("@material-ui/core/InputLabel"));
var FormControl_1 = __importDefault(require("@material-ui/core/FormControl"));
var react_1 = require("react");
var FilledRichInput_1 = __importDefault(require("../FilledRichInput"));
var OutlinedRichInput_1 = __importDefault(require("../OutlinedRichInput"));
var variantInputComponent = {
    filled: FilledRichInput_1.default,
    outlined: OutlinedRichInput_1.default,
};
/**
 * Rich Text Field
 *
 * @param {RichTextFieldProps} props
 * @returns {JSX.Element}
 */
var RichTextField = react_1.forwardRef(function RichTextField(props, ref) {
    var children = props.children, className = props.className, _a = props.color, color = _a === void 0 ? 'primary' : _a, defaultValue = props.defaultValue, _b = props.disabled, disabled = _b === void 0 ? false : _b, _c = props.error, error = _c === void 0 ? false : _c, FormHelperTextProps = props.FormHelperTextProps, _d = props.fullWidth, fullWidth = _d === void 0 ? false : _d, helperText = props.helperText, id = props.id, InputLabelProps = props.InputLabelProps, label = props.label, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, placeholder = props.placeholder, _e = props.required, required = _e === void 0 ? false : _e, value = props.value, _f = props.variant, variant = _f === void 0 ? 'filled' : _f, options = props.options, other = __rest(props, ["children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "label", "onBlur", "onChange", "onFocus", "placeholder", "required", "value", "variant", "options"]);
    var inputLabelId = label && id ? id + "-label" : undefined;
    var helperTextId = helperText && id ? id + "-helper-text" : undefined;
    var InputComponent = variantInputComponent[variant];
    // Render
    return (jsx_runtime_1.jsxs(FormControl_1.default, __assign({ className: className, disabled: disabled, error: error, fullWidth: fullWidth, required: required, color: color, variant: variant, ref: ref }, other, { children: [label && (jsx_runtime_1.jsx(InputLabel_1.default, __assign({ htmlFor: id, id: inputLabelId }, InputLabelProps, { children: label }), void 0)),
            jsx_runtime_1.jsx(InputComponent, { "aria-describedby": helperTextId, defaultValue: defaultValue, fullWidth: fullWidth, value: value, id: id, onBlur: onBlur, onChange: onChange, onFocus: onFocus, placeholder: placeholder, disabled: disabled, classes: {}, options: options, label: label }, void 0),
            helperText && (jsx_runtime_1.jsx(FormHelperText_1.default, __assign({ id: helperTextId }, FormHelperTextProps, { children: helperText }), void 0))] }), void 0));
});
// DEFAULT EXPORT
exports.default = RichTextField;
//# sourceMappingURL=RichTextField.js.map