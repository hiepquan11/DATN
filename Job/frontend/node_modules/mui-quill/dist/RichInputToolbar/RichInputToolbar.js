"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var Grid_1 = __importDefault(require("@material-ui/core/Grid"));
var Tooltip_1 = __importDefault(require("@material-ui/core/Tooltip"));
var IconButton_1 = __importDefault(require("@material-ui/core/IconButton"));
var styles_1 = require("@material-ui/core/styles");
var FormatBoldRounded_1 = __importDefault(require("@material-ui/icons/FormatBoldRounded"));
var FormatItalicRounded_1 = __importDefault(require("@material-ui/icons/FormatItalicRounded"));
var FormatListBulletedRounded_1 = __importDefault(require("@material-ui/icons/FormatListBulletedRounded"));
var FormatListNumberedRounded_1 = __importDefault(require("@material-ui/icons/FormatListNumberedRounded"));
var FormatQuoteRounded_1 = __importDefault(require("@material-ui/icons/FormatQuoteRounded"));
var FormatUnderlinedRounded_1 = __importDefault(require("@material-ui/icons/FormatUnderlinedRounded"));
var FormatTextdirectionRToLRounded_1 = __importDefault(require("@material-ui/icons/FormatTextdirectionRToLRounded"));
var FormatAlignLeftRounded_1 = __importDefault(require("@material-ui/icons/FormatAlignLeftRounded"));
var FormatAlignCenterRounded_1 = __importDefault(require("@material-ui/icons/FormatAlignCenterRounded"));
var FormatAlignRightRounded_1 = __importDefault(require("@material-ui/icons/FormatAlignRightRounded"));
var react_1 = require("react");
/**
 * Styles
 */
var stylesInjector = styles_1.withStyles(function (theme) {
    return styles_1.createStyles({
        root: {
            width: '100%',
            padding: '0 12px 12px',
        },
        group: {},
    });
}, { name: 'RichInputToolbar' });
/**
 * Rich Input Toolbar
 *
 * @returns {JSX.Element}
 */
var RichInputToolbar = react_1.forwardRef(function RichInputToolbar(props, ref) {
    var classes = props.classes;
    // Render
    return (jsx_runtime_1.jsx("div", __assign({ className: classes.root }, { children: jsx_runtime_1.jsxs(Grid_1.default, __assign({ container: true, ref: ref, spacing: 1, alignItems: "center" }, { children: [jsx_runtime_1.jsx(Grid_1.default, __assign({ item: true }, { children: jsx_runtime_1.jsxs("div", __assign({ className: classes.group }, { children: [jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-bold" }, { children: jsx_runtime_1.jsx(FormatBoldRounded_1.default, { fontSize: "small" }, void 0) }), void 0),
                            jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-italic" }, { children: jsx_runtime_1.jsx(FormatItalicRounded_1.default, { fontSize: "small" }, void 0) }), void 0),
                            jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-underline" }, { children: jsx_runtime_1.jsx(FormatUnderlinedRounded_1.default, { fontSize: "small" }, void 0) }), void 0)] }), void 0) }), void 0),
                jsx_runtime_1.jsx(Grid_1.default, __assign({ item: true }, { children: jsx_runtime_1.jsxs("div", __assign({ className: classes.group }, { children: [jsx_runtime_1.jsx(Tooltip_1.default, __assign({ title: "Numbered List" }, { children: jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-list", value: "ordered" }, { children: jsx_runtime_1.jsx(FormatListNumberedRounded_1.default, { fontSize: "small" }, void 0) }), void 0) }), void 0),
                            jsx_runtime_1.jsx(Tooltip_1.default, __assign({ title: "Bulleted List" }, { children: jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-list", value: "bullet" }, { children: jsx_runtime_1.jsx(FormatListBulletedRounded_1.default, { fontSize: "small" }, void 0) }), void 0) }), void 0),
                            jsx_runtime_1.jsx(Tooltip_1.default, __assign({ title: "Quote" }, { children: jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-blockquote" }, { children: jsx_runtime_1.jsx(FormatQuoteRounded_1.default, { fontSize: "small" }, void 0) }), void 0) }), void 0)] }), void 0) }), void 0),
                jsx_runtime_1.jsx(Grid_1.default, __assign({ item: true }, { children: jsx_runtime_1.jsxs("div", __assign({ className: classes.group }, { children: [jsx_runtime_1.jsx(Tooltip_1.default, __assign({ title: "Right to Left" }, { children: jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-direction", value: "rtl" }, { children: jsx_runtime_1.jsx(FormatTextdirectionRToLRounded_1.default, { fontSize: "small" }, void 0) }), void 0) }), void 0),
                            jsx_runtime_1.jsx(Tooltip_1.default, __assign({ title: "Align Left" }, { children: jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-align", value: "" }, { children: jsx_runtime_1.jsx(FormatAlignLeftRounded_1.default, { fontSize: "small" }, void 0) }), void 0) }), void 0),
                            jsx_runtime_1.jsx(Tooltip_1.default, __assign({ title: "Align Center" }, { children: jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-align", value: "center" }, { children: jsx_runtime_1.jsx(FormatAlignCenterRounded_1.default, { fontSize: "small" }, void 0) }), void 0) }), void 0),
                            jsx_runtime_1.jsx(Tooltip_1.default, __assign({ title: "Align Right" }, { children: jsx_runtime_1.jsx(IconButton_1.default, __assign({ size: "small", className: "ql-align", value: "right" }, { children: jsx_runtime_1.jsx(FormatAlignRightRounded_1.default, { fontSize: "small" }, void 0) }), void 0) }), void 0)] }), void 0) }), void 0)] }), void 0) }), void 0));
});
/**
 * @inheritdoc
 */
var RichInputToolbarContainer = react_1.memo(stylesInjector(RichInputToolbar));
// DEFAULT EXPORT
exports.default = RichInputToolbarContainer;
//# sourceMappingURL=RichInputToolbar.js.map