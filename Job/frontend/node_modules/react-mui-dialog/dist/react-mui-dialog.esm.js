import { useReducer, createElement, useContext, createContext } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, makeStyles } from '@material-ui/core';
import { Field, Formik, Form } from 'formik';
import { TextField } from 'formik-material-ui';
import startCase from 'lodash-es/startCase';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var reducer = function reducer(state, action) {
  switch (action.type) {
    case "open":
      return _extends({}, state, action.payload, {
        open: true
      });

    case "close":
      return _extends({}, state, {
        open: false
      });

    case "reset":
      return initialState;

    default:
      return state;
  }
};

var initialState = {
  open: false,
  title: "Dialog Title",
  contentText: "Dialog content text",
  cancelButton: {
    children: "Cancel"
  },
  submitButton: {
    children: "Submit"
  },
  fields: {},
  onSubmit: function onSubmit() {
    return Promise.resolve();
  },
  dialogProps: {
    fullWidth: true,
    maxWidth: "sm"
  },
  subcomponentProps: {
    dialogTitleProps: {},
    dialogContentProps: {},
    dialogContentTextProps: {},
    dialogActionsProps: {},
    formikProps: {}
  },
  customContent: undefined
};
var DialogContext = /*#__PURE__*/createContext({
  openDialog: function openDialog() {
    return null;
  },
  closeDialog: function closeDialog() {
    return null;
  }
});
var useStyles = /*#__PURE__*/makeStyles(function (theme) {
  return {
    dialogContent: {
      display: "flex",
      flexDirection: "column",
      gap: theme.spacing(2) + "px",
      marginBottom: theme.spacing(2)
    }
  };
});
var DialogProvider = function DialogProvider(_ref) {
  var children = _ref.children;
  // The warning [Warning: findDOMNode is deprecated in StrictMode.] is a known issue:
  // https://stackoverflow.com/a/63729408
  var classes = useStyles();

  var _useReducer = useReducer(reducer, initialState),
      value = _useReducer[0],
      dispatch = _useReducer[1];

  var open = value.open,
      onSubmit = value.onSubmit,
      title = value.title,
      contentText = value.contentText,
      fields = value.fields,
      validationSchema = value.validationSchema,
      cancelButton = value.cancelButton,
      submitButton = value.submitButton,
      dialogProps = value.dialogProps,
      sp = value.subcomponentProps,
      customContent = value.customContent;
  var initialValues = getInitialValues(fields);

  var openDialog = function openDialog(options) {
    return dispatch({
      type: "open",
      payload: options
    });
  };

  var closeDialog = function closeDialog() {
    return dispatch({
      type: "close"
    });
  };

  var handleExited = function handleExited() {
    return dispatch({
      type: "reset"
    });
  };

  var handleSubmit = function handleSubmit(values, formikHelpers) {
    if (!onSubmit) return;
    onSubmit(values, formikHelpers).then(closeDialog);
  };

  var fieldComponents = Object.entries(fields != null ? fields : {}).map(function (_ref2) {
    var name = _ref2[0],
        fieldOptions = _ref2[1];
    return "component" in fieldOptions ? fieldOptions.component : createElement(Field, Object.assign({
      component: TextField,
      variant: "outlined",
      fullWidth: true,
      label: (fieldOptions == null ? void 0 : fieldOptions.label) || startCase(name)
    }, fieldOptions.fieldProps, {
      name: name,
      key: name
    }));
  });
  return createElement(DialogContext.Provider, {
    value: {
      openDialog: openDialog,
      closeDialog: closeDialog
    }
  }, children, createElement(Dialog, Object.assign({
    open: open,
    onExited: handleExited
  }, dialogProps), customContent ? customContent : createElement(Formik, Object.assign({
    initialValues: initialValues,
    validationSchema: validationSchema,
    onSubmit: handleSubmit,
    validateOnChange: false,
    validateOnBlur: false
  }, sp == null ? void 0 : sp.formikProps), function (formProps) {
    return createElement(Form, Object.assign({}, sp == null ? void 0 : sp.formikFormProps), createElement(DialogTitle, Object.assign({}, sp == null ? void 0 : sp.dialogTitleProps), title), createElement(DialogContent, Object.assign({
      className: classes.dialogContent
    }, sp == null ? void 0 : sp.dialogContentProps), contentText && createElement(DialogContentText, Object.assign({}, sp == null ? void 0 : sp.dialogContentTextProps), contentText), !!fieldComponents.length && fieldComponents), createElement(DialogActions, Object.assign({}, sp == null ? void 0 : sp.dialogActionsProps), cancelButton && "component" in cancelButton ? cancelButton.component : cancelButton ? createElement(Button, Object.assign({
      onClick: closeDialog,
      color: "primary",
      disabled: formProps.isSubmitting
    }, cancelButton.props), cancelButton.children) : null, submitButton && "component" in submitButton ? submitButton.component : submitButton ? createElement(Button, Object.assign({
      type: "submit",
      color: "primary",
      disabled: formProps.isSubmitting
    }, submitButton.props), submitButton.children) : null));
  })));
};
var useDialog = function useDialog() {
  return useContext(DialogContext);
};

var getInitialValues = function getInitialValues(fields) {
  return Object.fromEntries(Object.entries(fields != null ? fields : {}).map(function (_ref3) {
    var name = _ref3[0],
        fieldOptions = _ref3[1];
    return [name, fieldOptions.initialValue];
  }));
};

export { DialogProvider, useDialog };
//# sourceMappingURL=react-mui-dialog.esm.js.map
