{"version":3,"file":"react-mui-dialog.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport * as Yup from \"yup\";\n\nimport {\n  Button,\n  ButtonProps,\n  Dialog,\n  DialogActions,\n  DialogActionsProps,\n  DialogContent,\n  DialogContentProps,\n  DialogContentText,\n  DialogContentTextProps,\n  DialogProps,\n  DialogTitle,\n  DialogTitleProps,\n  makeStyles,\n} from \"@material-ui/core\";\nimport {\n  Field,\n  FieldAttributes,\n  Form,\n  Formik,\n  FormikFormProps,\n  FormikHelpers,\n  FormikProps,\n} from \"formik\";\nimport { createContext, useContext } from \"react\";\n\nimport Lazy from \"yup/lib/Lazy\";\nimport Reference from \"yup/lib/Reference\";\nimport { TextField } from \"formik-material-ui\";\nimport startCase from \"lodash/startCase\";\nimport { useReducer } from \"react\";\n\nexport type ActionButtonOptions =\n  | false\n  | { children: string | React.ReactNode; props?: ButtonProps }\n  | { component: React.ReactNode };\n\nexport type FieldOptions<T extends string = string> = Record<\n  T,\n  {\n    initialValue: any;\n    label?: string;\n    fieldProps?: FieldAttributes<any>;\n    component?: React.ReactNode;\n  }\n>;\n\n/**\n * Turns ObjectShape into a generic.\n * See: https://github.com/jquense/yup/blob/3b67dc0b59c8cf05fb5ee00b1560a2ab68ca3918/src/object.ts#L30\n */\ntype YupObjectShape<T extends string> = Record<\n  T,\n  Yup.AnySchema | Reference | Lazy<any, any>\n>;\n\nexport type DialogOptions<\n  FieldNames extends string = string,\n  Fields = FieldOptions<FieldNames>,\n  Values = Record<keyof Fields, string>\n> = Partial<{\n  title: string | React.ReactNode;\n  contentText: string | React.ReactNode;\n  fields: Fields;\n  validationSchema: Yup.ObjectSchema<YupObjectShape<FieldNames>>;\n  cancelButton: ActionButtonOptions;\n  submitButton: ActionButtonOptions;\n  onSubmit: (\n    values: Values,\n    formikHelpers: FormikHelpers<Values>\n  ) => Promise<any>;\n  dialogProps: Omit<DialogProps, \"open\">;\n  subcomponentProps: {\n    dialogTitleProps?: DialogTitleProps;\n    dialogContentProps?: DialogContentProps;\n    dialogContentTextProps?: DialogContentTextProps;\n    dialogActionsProps?: DialogActionsProps;\n    formikProps?: Partial<FormikProps<Values>>;\n    formikFormProps?: FormikFormProps;\n  };\n  customContent: undefined | React.ReactNode;\n}>;\n\ntype OpenDialogAction = {\n  type: \"open\";\n  payload: DialogOptions;\n};\ntype CloseDialogAction = { type: \"close\" };\ntype ResetDialogAction = { type: \"reset\" };\ntype Actions = OpenDialogAction | CloseDialogAction | ResetDialogAction;\ntype State = { open: boolean } & DialogOptions;\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case \"open\":\n      return { ...state, ...action.payload, open: true };\n    case \"close\":\n      return { ...state, open: false };\n    case \"reset\":\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nconst initialState: State = {\n  open: false,\n  title: \"Dialog Title\",\n  contentText: \"Dialog content text\",\n  cancelButton: { children: \"Cancel\" },\n  submitButton: { children: \"Submit\" },\n  fields: {},\n  onSubmit: () => Promise.resolve(),\n  dialogProps: {\n    fullWidth: true,\n    maxWidth: \"sm\",\n  },\n  subcomponentProps: {\n    dialogTitleProps: {},\n    dialogContentProps: {},\n    dialogContentTextProps: {},\n    dialogActionsProps: {},\n    formikProps: {},\n  },\n  customContent: undefined,\n};\n\nexport type OpenDialog = <T extends string>(options: DialogOptions<T>) => void;\n\ntype ContextType = {\n  openDialog: OpenDialog;\n  closeDialog: () => void;\n};\n\nconst DialogContext = createContext<ContextType>({\n  openDialog: () => null,\n  closeDialog: () => null,\n});\n\nconst useStyles = makeStyles(theme => ({\n  dialogContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    gap: `${theme.spacing(2)}px`,\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport const DialogProvider: React.FC = ({ children }) => {\n  // The warning [Warning: findDOMNode is deprecated in StrictMode.] is a known issue:\n  // https://stackoverflow.com/a/63729408\n  const classes = useStyles();\n  const [value, dispatch] = useReducer(reducer, initialState);\n  const {\n    open,\n    onSubmit,\n    title,\n    contentText,\n    fields,\n    validationSchema,\n    cancelButton,\n    submitButton,\n    dialogProps,\n    subcomponentProps: sp,\n    customContent,\n  } = value;\n\n  const initialValues = getInitialValues(fields);\n\n  const openDialog: OpenDialog = options =>\n    dispatch({ type: \"open\", payload: options as DialogOptions });\n  const closeDialog = () => dispatch({ type: \"close\" });\n  const handleExited = () => dispatch({ type: \"reset\" });\n  const handleSubmit = (\n    values: typeof initialValues,\n    formikHelpers: FormikHelpers<typeof initialValues>\n  ) => {\n    if (!onSubmit) return;\n    onSubmit(values, formikHelpers).then(closeDialog);\n  };\n\n  const fieldComponents = Object.entries(\n    fields ?? {}\n  ).map(([name, fieldOptions]) =>\n    \"component\" in fieldOptions ? (\n      fieldOptions.component\n    ) : (\n      <Field\n        component={TextField}\n        variant=\"outlined\"\n        fullWidth\n        label={fieldOptions?.label || startCase(name)}\n        {...fieldOptions.fieldProps}\n        name={name}\n        key={name}\n      />\n    )\n  );\n\n  return (\n    <DialogContext.Provider value={{ openDialog, closeDialog }}>\n      {children}\n      <Dialog open={open} onExited={handleExited} {...dialogProps}>\n        {customContent ? (\n          customContent\n        ) : (\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n            validateOnChange={false}\n            validateOnBlur={false}\n            {...sp?.formikProps}\n          >\n            {formProps => (\n              <Form {...sp?.formikFormProps}>\n                <DialogTitle {...sp?.dialogTitleProps}>{title}</DialogTitle>\n\n                <DialogContent\n                  className={classes.dialogContent}\n                  {...sp?.dialogContentProps}\n                >\n                  {contentText && (\n                    <DialogContentText {...sp?.dialogContentTextProps}>\n                      {contentText}\n                    </DialogContentText>\n                  )}\n                  {!!fieldComponents.length && fieldComponents}\n                </DialogContent>\n\n                <DialogActions {...sp?.dialogActionsProps}>\n                  {cancelButton && \"component\" in cancelButton ? (\n                    cancelButton.component\n                  ) : cancelButton ? (\n                    <Button\n                      onClick={closeDialog}\n                      color=\"primary\"\n                      disabled={formProps.isSubmitting}\n                      {...cancelButton.props}\n                    >\n                      {cancelButton.children}\n                    </Button>\n                  ) : null}\n                  {submitButton && \"component\" in submitButton ? (\n                    submitButton.component\n                  ) : submitButton ? (\n                    <Button\n                      type=\"submit\"\n                      color=\"primary\"\n                      disabled={formProps.isSubmitting}\n                      {...submitButton.props}\n                    >\n                      {submitButton.children}\n                    </Button>\n                  ) : null}\n                </DialogActions>\n              </Form>\n            )}\n          </Formik>\n        )}\n      </Dialog>\n    </DialogContext.Provider>\n  );\n};\n\nexport const useDialog = () => useContext(DialogContext);\n\nconst getInitialValues = (fields: DialogOptions[\"fields\"]) => {\n  return Object.fromEntries(\n    Object.entries(fields ?? {}).map(([name, fieldOptions]) => [\n      name,\n      fieldOptions.initialValue,\n    ])\n  );\n};\n"],"names":["reducer","state","action","type","payload","open","initialState","title","contentText","cancelButton","children","submitButton","fields","onSubmit","Promise","resolve","dialogProps","fullWidth","maxWidth","subcomponentProps","dialogTitleProps","dialogContentProps","dialogContentTextProps","dialogActionsProps","formikProps","customContent","undefined","DialogContext","createContext","openDialog","closeDialog","useStyles","makeStyles","theme","dialogContent","display","flexDirection","gap","spacing","marginBottom","classes","useReducer","value","dispatch","validationSchema","sp","initialValues","Object","fromEntries","entries","map","initialValue","getInitialValues","fieldComponents","name","fieldOptions","component","React","Field","TextField","variant","label","startCase","fieldProps","key","Provider","options","Dialog","onExited","Formik","values","formikHelpers","then","validateOnChange","validateOnBlur","formProps","Form","formikFormProps","DialogTitle","DialogContent","className","DialogContentText","length","DialogActions","Button","onClick","color","disabled","isSubmitting","props","useContext"],"mappings":"gdA+FA,IAAMA,EAAU,SAACC,EAAcC,UACrBA,EAAOC,UACR,mBACSF,EAAUC,EAAOE,SAASC,MAAM,QACzC,oBACSJ,GAAOI,MAAM,QACtB,eACIC,iBAEAL,IAIPK,EAAsB,CAC1BD,MAAM,EACNE,MAAO,eACPC,YAAa,sBACbC,aAAc,CAAEC,SAAU,UAC1BC,aAAc,CAAED,SAAU,UAC1BE,OAAQ,GACRC,SAAU,kBAAMC,QAAQC,WACxBC,YAAa,CACXC,WAAW,EACXC,SAAU,MAEZC,kBAAmB,CACjBC,iBAAkB,GAClBC,mBAAoB,GACpBC,uBAAwB,GACxBC,mBAAoB,GACpBC,YAAa,IAEfC,mBAAeC,GAUXC,EAAgBC,gBAA2B,CAC/CC,WAAY,kBAAM,MAClBC,YAAa,kBAAM,QAGfC,EAAYC,cAAW,SAAAC,SAAU,CACrCC,cAAe,CACbC,QAAS,OACTC,cAAe,SACfC,IAAQJ,EAAMK,QAAQ,QACtBC,aAAcN,EAAMK,QAAQ,+BAIQ,gBAAG5B,IAAAA,SAGnC8B,EAAUT,MACUU,aAAWzC,EAASM,GAAvCoC,OAAOC,OAEZtC,EAWEqC,EAXFrC,KACAQ,EAUE6B,EAVF7B,SACAN,EASEmC,EATFnC,MACAC,EAQEkC,EARFlC,YACAI,EAOE8B,EAPF9B,OACAgC,EAMEF,EANFE,iBACAnC,EAKEiC,EALFjC,aACAE,EAIE+B,EAJF/B,aACAK,EAGE0B,EAHF1B,YACmB6B,EAEjBH,EAFFvB,kBACAM,EACEiB,EADFjB,cAGIqB,EAoGiB,SAAClC,UACjBmC,OAAOC,YACZD,OAAOE,cAAQrC,EAAAA,EAAU,IAAIsC,KAAI,kBAA0B,WAE5CC,kBAxGKC,CAAiBxC,GAIjCkB,EAAc,kBAAMa,EAAS,CAAExC,KAAM,WAUrCkD,EAAkBN,OAAOE,cAC7BrC,EAAAA,EAAU,IACVsC,KAAI,gBAAEI,OAAMC,aACZ,cAAeA,EACbA,EAAaC,UAEbC,gBAACC,uBACCF,UAAWG,YACXC,QAAQ,WACR3C,aACA4C,aAAON,SAAAA,EAAcM,QAASC,EAAUR,IACpCC,EAAaQ,YACjBT,KAAMA,EACNU,IAAKV,eAMTG,gBAAC9B,EAAcsC,UAASvB,MAAO,CAAEb,WA/BJ,SAAAqC,UAC7BvB,EAAS,CAAExC,KAAM,OAAQC,QAAS8D,KA8BWpC,YAAAA,IAC1CpB,EACD+C,gBAACU,wBAAO9D,KAAMA,EAAM+D,SA9BH,kBAAMzB,EAAS,CAAExC,KAAM,YA8BQa,GAC7CS,GAGCgC,gBAACY,wBACCvB,cAAeA,EACfF,iBAAkBA,EAClB/B,SApCW,SACnByD,EACAC,GAEK1D,GACLA,EAASyD,EAAQC,GAAeC,KAAK1C,IAgC7B2C,kBAAkB,EAClBC,gBAAgB,SACZ7B,SAAAA,EAAIrB,cAEP,SAAAmD,UACClB,gBAACmB,8BAAS/B,SAAAA,EAAIgC,iBACZpB,gBAACqB,qCAAgBjC,SAAAA,EAAIzB,kBAAmBb,GAExCkD,gBAACsB,+BACCC,UAAWxC,EAAQN,qBACfW,SAAAA,EAAIxB,oBAEPb,GACCiD,gBAACwB,2CAAsBpC,SAAAA,EAAIvB,wBACxBd,KAGF6C,EAAgB6B,QAAU7B,GAG/BI,gBAAC0B,uCAAkBtC,SAAAA,EAAItB,oBACpBd,GAAgB,cAAeA,EAC9BA,EAAa+C,UACX/C,EACFgD,gBAAC2B,wBACCC,QAASvD,EACTwD,MAAM,UACNC,SAAUZ,EAAUa,cAChB/E,EAAagF,OAEhBhF,EAAaC,UAEd,KACHC,GAAgB,cAAeA,EAC9BA,EAAa6C,UACX7C,EACF8C,gBAAC2B,wBACCjF,KAAK,SACLmF,MAAM,UACNC,SAAUZ,EAAUa,cAChB7E,EAAa8E,OAEhB9E,EAAaD,UAEd,+BAWG,kBAAMgF,aAAW/D"}