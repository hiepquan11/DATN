{"version":3,"file":"react-form-hook-mui.esm.js","sources":["../src/TextFieldElement.tsx","../src/FormContainer.tsx","../src/DatePickerElement.tsx","../src/CheckboxElement.tsx","../src/SelectElement.tsx","../src/CheckboxButtonGroup.tsx","../src/MultiSelectElement.tsx","../src/PasswordElement.tsx","../src/RadioButtonGroup.tsx","../src/SwitchElement.tsx"],"sourcesContent":["import { TextField, TextFieldProps } from '@mui/material'\nimport { Control, Controller, ControllerProps, FieldError } from 'react-hook-form'\nimport React from 'react'\n\nexport type TextFieldElementProps = Omit<TextFieldProps,\n  'name'> & {\n  validation?: ControllerProps['rules']\n  name: string\n  parseError?: (error: FieldError) => string\n  control?: Control<any>\n}\n\nexport default function TextFieldElement({\n  validation = {},\n  parseError,\n  type,\n  required,\n  name,\n  control,\n  ...rest\n}: TextFieldElementProps): JSX.Element {\n  if (required) {\n    validation.required = 'This field is required'\n  }\n  if (type === 'email') {\n    validation.pattern = {\n      // eslint-disable-next-line no-useless-escape\n      value: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: 'Please enter a valid email address'\n    }\n  }\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={validation}\n      render={({ field: { value, onChange, onBlur }, fieldState: { invalid, error } }) =>\n        <TextField\n          {...rest}\n          name={name}\n          value={value || ''}\n          onChange={onChange}\n          onBlur={onBlur}\n          required={required}\n          type={type}\n          error={invalid}\n          helperText={error ? (typeof parseError === 'function' ? parseError(error) : error.message) : rest.helperText}\n        />\n      }\n    />\n  )\n}\n","import React, { FormHTMLAttributes, FunctionComponent } from 'react'\nimport { FormProvider, useForm, UseFormReturn } from 'react-hook-form'\n\nexport type FormContainerProps = {\n  defaultValues?: any\n  onSuccess?: (values: any) => void\n  handleSubmit?: (values: any) => void\n  formContext?: UseFormReturn<any>\n  FormProps?: FormHTMLAttributes<HTMLFormElement>\n}\n\nconst FormContainerCore: FunctionComponent<FormContainerProps> = ({\n  defaultValues = {},\n  onSuccess = () => {\n  },\n  FormProps,\n  children\n}) => {\n  const methods = useForm<typeof defaultValues>({\n    defaultValues\n  })\n  const { handleSubmit } = methods\n\n  return (\n    <FormProvider {...methods}>\n      <form onSubmit={handleSubmit(onSuccess)} noValidate {...FormProps}>\n        {children}\n      </form>\n    </FormProvider>\n  )\n}\nconst FormContainer: FunctionComponent<FormContainerProps> = props => {\n  if (!props.formContext && !props.handleSubmit) {\n    return <FormContainerCore {...props} />\n  } else if (props.handleSubmit && props.formContext) {\n    return (\n      <FormProvider {...props.formContext}>\n        <form\n          noValidate\n          {...props.FormProps}\n          onSubmit={props.handleSubmit}>\n          {props.children}\n        </form>\n      </FormProvider>\n    )\n  }\n  if (props.formContext && props.onSuccess) {\n    return (\n      <FormProvider {...props.formContext}>\n        <form\n          onSubmit={props.formContext.handleSubmit(props.onSuccess)}\n          noValidate\n          {...props.FormProps}\n        >\n          {props.children}\n        </form>\n      </FormProvider>\n    )\n  }\n\n  return (\n    <div>\n      Incomplete setup of FormContainer..\n    </div>\n  )\n}\n\nexport default FormContainer\n","import React from 'react'\nimport { DatePicker, DatePickerProps } from '@mui/lab'\nimport { Control, Controller, ControllerProps, FieldError } from 'react-hook-form'\nimport { TextField, TextFieldProps } from '@mui/material'\n\nexport type DatePickerElementProps<TDate = unknown> = Omit<DatePickerProps, 'value' | 'onChange' | 'renderInput'> & {\n  name: string\n  required?: boolean\n  isDate?: boolean\n  parseError?: (error: FieldError) => string\n  onChange?: (value?: TDate) => void\n  validation?: ControllerProps['rules']\n  parseDate?: (date: TDate) => string\n  control?: Control<any>\n  inputProps?: TextFieldProps\n  helperText?: TextFieldProps['helperText']\n}\n\nexport default function DatePickerElement({\n  isDate,\n  parseError,\n  name,\n  required,\n  parseDate,\n  validation = {},\n  inputProps,\n  control,\n  ...rest\n}: DatePickerElementProps): JSX.Element {\n\n  if (required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      render={({ field: { onChange, value }, fieldState: { error, invalid } }) =>\n        <DatePicker\n          {...rest}\n          value={value || ''}\n          onChange={(date, selectionState) => {\n            let parsedDate = ''\n            if (selectionState) {\n              if (typeof parseDate === 'function') {\n                parsedDate = parseDate(selectionState)\n              }\n            } else {\n              parsedDate = date?.toISOString().substr(0, 10)\n              if (typeof parseDate === 'function') {\n                parsedDate = parseDate(date)\n              }\n            }\n            onChange(parsedDate)\n            if (typeof rest.onChange === 'function') {\n              rest.onChange(parsedDate)\n            }\n          }}\n          renderInput={\n            (params) =>\n              <TextField\n                {...params}\n                {...inputProps}\n                required={!!required}\n                error={invalid}\n                helperText={\n                  error\n                    ? (typeof parseError === 'function' ? parseError(error) : error.message)\n                    : inputProps?.helperText || rest.helperText\n                }\n              />\n          }\n        />}\n    />\n  )\n}\n","import React from 'react'\nimport { Control, Controller, ControllerProps, FieldError } from 'react-hook-form'\nimport {\n  Checkbox,\n  CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  FormControlLabelProps,\n  FormGroup,\n  FormHelperText\n} from '@mui/material'\n\nexport type CheckboxElementProps = Omit<CheckboxProps, 'name'> & {\n  validation?: ControllerProps['rules']\n  name: string\n  parseError?: (error: FieldError) => string\n  label?: FormControlLabelProps['label']\n  helperText?: string\n  control?: Control<any>\n}\n\nexport default function CheckboxElement({\n  name,\n  validation = {},\n  required,\n  parseError,\n  label,\n  control,\n  ...rest\n}: CheckboxElementProps): JSX.Element {\n\n  if (required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      render={({ field: { value, onChange }, fieldState: { invalid, error } }) => {\n        const helperText = error ? (typeof parseError === 'function' ? parseError(error) : error.message) : rest.helperText\n        return (\n          <FormControl required={required} error={invalid}>\n            <FormGroup row>\n              <FormControlLabel\n                label={label || ''}\n                control={\n                  <Checkbox\n                    color={'primary'}\n                    sx={{\n                      color: invalid ? \"error.main\" : undefined,\n                    }}\n                    value={value}\n                    checked={!!value}\n                    onChange={() => {\n                      onChange(!value)\n                      //setValue(name, !formValue, { shouldValidate: true })\n                    }}\n                  />\n                }\n              />\n            </FormGroup>\n            {helperText && <FormHelperText error={invalid}>{helperText}</FormHelperText>}\n          </FormControl>\n        )\n      }}\n    />\n  )\n}\n","import React, { createElement } from 'react'\nimport { MenuItem, TextField, TextFieldProps } from '@mui/material'\nimport { Control, Controller, ControllerProps, FieldError } from 'react-hook-form'\n\nexport type SelectElementProps = Omit<TextFieldProps, 'name' | 'type' | 'onChange'> & {\n  validation?: ControllerProps['rules']\n  name: string\n  options?: any[]\n  valueKey?: string\n  labelKey?: string\n  type?: 'string' | 'number'\n  parseError?: (error: FieldError) => string\n  objectOnChange?: boolean\n  onChange?: (value: any) => void\n  control?: Control<any>\n}\n\nexport default function SelectElement({\n  name,\n  required,\n  valueKey = 'id',\n  labelKey = 'title',\n  options = [],\n  parseError,\n  type,\n  objectOnChange,\n  validation = {},\n  control,\n  ...rest\n}: SelectElementProps): JSX.Element {\n  const isNativeSelect = !!rest.SelectProps?.native\n  const ChildComponent = isNativeSelect ? 'option' : MenuItem\n  if (required) {\n    validation.required = 'This field is required'\n  }\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      render={({ field: { onBlur, onChange, value }, fieldState: { invalid, error } }) => {\n        // handle shrink on number input fields\n        if (type === 'number' && value) {\n          rest.InputLabelProps = rest.InputLabelProps || {}\n          rest.InputLabelProps.shrink = true\n        }\n        if (typeof value === 'object') {\n          value = value[valueKey] // if value is object get key\n        }\n        return <TextField\n          {...rest}\n          name={name}\n          value={value || ''}\n          onBlur={onBlur}\n          onChange={(event) => {\n            let item: number | string = event.target.value\n            if (type === 'number') {\n              item = Number(item)\n            }\n            onChange(item)\n            if (typeof rest.onChange === 'function') {\n              if (objectOnChange) {\n                item = options.find(i => i[valueKey] === item)\n              }\n              rest.onChange(item)\n            }\n          }}\n          select\n          required={required}\n          error={invalid}\n          helperText={error ? (typeof parseError === 'function' ? parseError(error) : error.message) : rest.helperText}\n        >{isNativeSelect && <option />}\n          {options.map((item: any) =>\n            createElement(\n              ChildComponent,\n              {\n                key: `${name}_${item[valueKey]}`,\n                value: item[valueKey]\n              },\n              item[labelKey]\n            )\n          )}\n        </TextField>\n      }}\n    />\n  )\n}\n","import React from 'react'\nimport {\n  Checkbox,\n  CheckboxProps,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  useTheme\n} from '@mui/material'\nimport { Control, FieldError, useController } from 'react-hook-form'\n\nexport type CheckboxButtonGroupProps = {\n  options: any[]\n  helperText?: string\n  name: string\n  required?: boolean\n  parseError?: (error: FieldError) => string\n  label?: string\n  labelKey?: string\n  valueKey?: string\n  onChange?: Function\n  returnObject?: boolean\n  disabled?: boolean\n  row?: boolean\n  control?: Control<any>\n  checkboxColor?: CheckboxProps['color']\n}\n\nexport default function CheckboxButtonGroup({\n  helperText,\n  options,\n  label,\n  name,\n  parseError,\n  required,\n  labelKey = 'label',\n  valueKey = 'id',\n  returnObject,\n  disabled,\n  row,\n  control,\n  checkboxColor,\n  ...rest\n}: CheckboxButtonGroupProps): JSX.Element {\n  const theme = useTheme()\n  const { field: { value = [], onChange }, fieldState: { invalid, error } } = useController({\n    name,\n    rules: required ? { required: 'This field is required' } : undefined,\n    control\n  })\n\n  helperText = error ? (typeof parseError === 'function' ? parseError(error) : error.message) : helperText\n\n  const handleChange = (index: number | string) => {\n    const newArray = [...value]\n    const exists =\n      value.findIndex((i: any) =>\n        returnObject ? i[valueKey] === index : i === index\n      ) === -1\n    if (exists) {\n      newArray.push(\n        returnObject ? options.find(i => i[valueKey] === index) : index\n      )\n    } else {\n      newArray.splice(\n        value.findIndex((i: any) =>\n          returnObject ? i[valueKey] === index : i === index\n        ),\n        1\n      )\n    }\n    // setValue(name, newArray, { shouldValidate: true })\n    onChange(newArray)\n    if (typeof rest.onChange === 'function') {\n      rest.onChange(newArray)\n    }\n  }\n\n  return (\n    <FormControl error={invalid} required={required}>\n      {label && <FormLabel error={invalid}>{label}</FormLabel>}\n      <FormGroup row={row}>\n        {options.map((option: any) => {\n          const optionKey = option[valueKey]\n          if (!optionKey) {\n            console.error(\n              `CheckboxButtonGroup: valueKey ${valueKey} does not exist on option`,\n              option\n            )\n          }\n          const isChecked =\n            value.findIndex((item: any) =>\n              returnObject ? item[valueKey] === optionKey : item === optionKey\n            ) !== -1\n          return (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  sx={{\n                    color: invalid ? theme.palette.error.main : undefined\n                  }}\n                  color={checkboxColor || 'primary'}\n                  value={optionKey}\n                  checked={isChecked}\n                  disabled={disabled}\n                  onChange={() => handleChange(optionKey)}\n                />\n              }\n              label={option[labelKey]}\n              key={optionKey}\n            />\n          )\n        })}\n      </FormGroup>\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </FormControl>\n  )\n}\n","import React from 'react'\nimport CloseIcon from '@mui/icons-material/Cancel'\nimport { Control, Controller, FieldError } from 'react-hook-form'\nimport {\n  Checkbox,\n  Chip,\n  FormControl,\n  FormHelperText,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  Select,\n  SelectProps\n} from '@mui/material'\n\nexport type MultiSelectElementProps = Omit<SelectProps, 'value'> & {\n  menuItems: any[]\n  label?: string\n  itemKey?: string\n  itemValue?: string\n  itemLabel?: string\n  required?: boolean\n  validation?: any\n  name: string\n  parseError?: (error: FieldError) => string\n  minWidth?: number\n  menuMaxHeight?: number\n  menuMaxWidth?: number\n  helperText?: string\n  showChips?: boolean\n  control?: Control<any>\n  showCheckbox?: boolean\n}\n\nconst ITEM_HEIGHT = 48\nconst ITEM_PADDING_TOP = 8\n\nexport default function MultiSelectElement({\n  menuItems,\n  label = '',\n  itemKey = '',\n  itemValue = '',\n  itemLabel = '',\n  required = false,\n  validation = {},\n  parseError,\n  name,\n  menuMaxHeight = ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n  menuMaxWidth = 250,\n  minWidth = 120,\n  helperText,\n  showChips,\n  variant,\n  control,\n  showCheckbox,\n  ...rest\n}: MultiSelectElementProps): JSX.Element {\n\n  if (required) {\n    validation.required = 'This field is required'\n  }\n\n  return (\n    <Controller\n      name={name}\n      rules={validation}\n      control={control}\n      render={({ field: { value, onChange, onBlur }, fieldState: { invalid, error } }) => {\n        helperText = error ? (typeof parseError === 'function' ? parseError(error) : error.message) : helperText\n        return (\n          <FormControl\n            variant={variant}\n            style={{ minWidth }}\n            fullWidth={rest.fullWidth}\n            error={invalid}\n          >\n            {label && (\n              <InputLabel error={invalid} htmlFor={rest.id || `select-multi-select-${name}`} required={required}>\n                {label}\n              </InputLabel>\n            )}\n            <Select\n              {...rest}\n              id={rest.id || `select-multi-select-${name}`}\n              multiple\n              label={label || undefined}\n              error={invalid}\n              value={value || []}\n              required={required}\n              onChange={onChange}\n              onBlur={onBlur}\n              MenuProps={{\n                PaperProps: {\n                  style: {\n                    maxHeight: menuMaxHeight,\n                    width: menuMaxWidth\n                  }\n                }\n              }}\n              renderValue={typeof rest.renderValue === 'function' ? rest.renderValue : showChips ? (selected) => (\n                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                  {(selected as any[] || []).map((selectedValue) => (\n                    <Chip\n                      key={selectedValue}\n                      label={selectedValue}\n                      style={{ display: 'flex', flexWrap: 'wrap' }}\n                      onDelete={() => {\n                        onChange(value.filter((i: any) => i !== selectedValue))\n                        // setValue(name, formValue.filter((i: any) => i !== value), { shouldValidate: true })\n                      }}\n                      deleteIcon={<CloseIcon\n                        onMouseDown={(ev) => {\n                          ev.stopPropagation()\n                        }} />\n                      }\n                    />\n                  ))}\n                </div>\n              ) : (selected) => selected?.join(', ')}\n            >\n              {menuItems.map((item: any) => {\n                const isChecked = value?.includes(item) ?? false\n                const key = itemValue || itemKey\n                let val = key ? item[key] : item\n                return (\n                  <MenuItem\n                    key={val}\n                    value={val}\n                    sx={{\n                      fontWeight: (theme) => isChecked ? theme.typography.fontWeightBold : theme.typography.fontWeightRegular\n                    }}\n                  >\n                    {showCheckbox && <Checkbox checked={isChecked} />}\n                    <ListItemText primary={itemLabel ? item[itemLabel] : item} />\n                  </MenuItem>\n                )\n              })}\n            </Select>\n            {helperText && <FormHelperText>{helperText}</FormHelperText>}\n          </FormControl>\n        )\n      }}\n    />\n  )\n}\n\n","import React, { MouseEvent, useState } from 'react'\nimport TextFieldElement, { TextFieldElementProps } from './TextFieldElement'\nimport { IconButton, InputAdornment } from '@mui/material'\nimport Visibility from '@mui/icons-material/Visibility'\nimport VisibilityOff from '@mui/icons-material/VisibilityOff'\n\nexport type PasswordElementProps = TextFieldElementProps\n\nexport default function PasswordElement(props: PasswordElementProps): JSX.Element {\n  const [password, setPassword] = useState<boolean>(true)\n  return (\n    <TextFieldElement\n      {...props}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position={'end'}>\n            <IconButton\n              onMouseDown={(e: MouseEvent<HTMLButtonElement>) =>\n                e.preventDefault()\n              }\n              onClick={() => setPassword(!password)}\n              tabIndex={-1}\n            >\n              {password ? <Visibility /> : <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n        )\n      }}\n      type={password ? 'password' : 'text'}\n    />\n  )\n}\n","import React, { ChangeEvent } from 'react'\nimport { Control, FieldError, useController } from 'react-hook-form'\nimport { FormControl, FormControlLabel, FormHelperText, FormLabel, Radio, RadioGroup, useTheme } from '@mui/material'\n\n\nexport type RadioButtonGroupProps = {\n  options: any[]\n  helperText?: string\n  name: string\n  required?: boolean\n  parseError?: (error: FieldError) => string\n  label?: string\n  labelKey?: string\n  valueKey?: string\n  type?: 'number' | 'string'\n  emptyOptionLabel?: 'string'\n  onChange?: (value: any) => void\n  returnObject?: boolean\n  row?: boolean\n  control?: Control<any>\n}\n\nexport default function RadioButtonGroup({\n  helperText,\n  options,\n  label,\n  name,\n  parseError,\n  labelKey = 'label',\n  valueKey = 'id',\n  required,\n  emptyOptionLabel,\n  returnObject,\n  row,\n  control,\n  ...rest\n}: RadioButtonGroupProps): JSX.Element {\n  const theme = useTheme()\n  const { field: { value, onChange }, fieldState: { invalid, error } } = useController({\n    name,\n    rules: required ? { required: 'This field is required' } : undefined,\n    control\n  })\n\n  helperText = error ? (typeof parseError === 'function' ? parseError(error) : error.message) : helperText\n\n  const onRadioChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const radioValue = (event.target as HTMLInputElement).value\n    const returnValue = returnObject\n      ? options.find(items => items[valueKey] === radioValue)\n      : radioValue\n    // setValue(name, returnValue, { shouldValidate: true })\n    onChange(returnValue)\n    if (typeof rest.onChange === 'function') {\n      rest.onChange(returnValue)\n    }\n  }\n\n  return (\n    <FormControl error={invalid}>\n      {label && <FormLabel required={required} error={invalid}>{label}</FormLabel>}\n      <RadioGroup onChange={onRadioChange}\n                  name={name}\n                  row={row}\n                  value={value || ''}>\n        {emptyOptionLabel && (\n          <FormControlLabel\n            control={<Radio sx={{\n              color: invalid ? theme.palette.error.main : undefined\n            }} checked={!value} />}\n            label={emptyOptionLabel}\n            value=\"\"\n          />\n        )}\n        {options.map((option: any) => {\n          const optionKey = option[valueKey]\n          if (!optionKey) {\n            console.error(\n              `CheckboxButtonGroup: valueKey ${valueKey} does not exist on option`,\n              option\n            )\n          }\n          const isChecked = !!(\n            value &&\n            (returnObject\n              ? value[valueKey] === optionKey\n              : value === optionKey)\n          )\n          return (\n            <FormControlLabel\n              control={<Radio sx={{\n                color: invalid ? theme.palette.error.main : undefined\n              }} checked={isChecked} />}\n              value={optionKey}\n              label={option[labelKey]}\n              key={optionKey}\n            />\n          )\n        })}\n      </RadioGroup>\n      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n    </FormControl>\n  )\n}\n","import { Control, Controller } from 'react-hook-form'\nimport { FormControlLabel, FormControlLabelProps, Switch } from '@mui/material'\nimport React from 'react'\n// ----------------------------------------------------------------------\n\ntype IProps = Omit<FormControlLabelProps, 'control'>;\n\nexport type SwitchElementProps = IProps & {\n  name: string;\n  control?: Control<any>\n}\n\nexport default function SwitchElement({ name, control, ...other }: SwitchElementProps) {\n  return (\n    <FormControlLabel\n      control={\n        <Controller\n          name={name}\n          control={control}\n          render={({ field }) => <Switch {...field} checked={field.value} />}\n        />\n      }\n      {...other}\n    />\n  )\n}\n"],"names":["TextFieldElement","validation","parseError","type","required","name","control","rest","pattern","value","message","React","Controller","rules","render","field","fieldState","error","TextField","onChange","onBlur","invalid","helperText","FormContainerCore","defaultValues","onSuccess","FormProps","children","methods","useForm","handleSubmit","FormProvider","onSubmit","noValidate","FormContainer","props","formContext","DatePickerElement","isDate","parseDate","inputProps","DatePicker","date","selectionState","parsedDate","toISOString","substr","renderInput","params","CheckboxElement","label","FormControl","FormGroup","row","FormControlLabel","Checkbox","color","sx","undefined","checked","FormHelperText","SelectElement","valueKey","labelKey","options","objectOnChange","isNativeSelect","SelectProps","_rest$SelectProps","ChildComponent","MenuItem","InputLabelProps","shrink","event","item","target","Number","find","i","select","map","createElement","key","CheckboxButtonGroup","returnObject","disabled","checkboxColor","theme","useTheme","useController","FormLabel","option","optionKey","console","isChecked","findIndex","palette","main","index","newArray","push","splice","MultiSelectElement","menuItems","itemKey","itemValue","itemLabel","menuMaxHeight","ITEM_HEIGHT","menuMaxWidth","minWidth","showChips","variant","showCheckbox","style","fullWidth","InputLabel","htmlFor","id","Select","multiple","MenuProps","PaperProps","maxHeight","width","renderValue","selected","display","flexWrap","selectedValue","Chip","onDelete","filter","deleteIcon","CloseIcon","onMouseDown","ev","stopPropagation","join","includes","val","fontWeight","typography","fontWeightBold","fontWeightRegular","ListItemText","primary","PasswordElement","useState","password","setPassword","InputProps","endAdornment","InputAdornment","position","IconButton","e","preventDefault","onClick","tabIndex","Visibility","VisibilityOff","RadioButtonGroup","emptyOptionLabel","RadioGroup","radioValue","returnValue","items","Radio","SwitchElement","other","Switch"],"mappings":"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"}